diff --git a/node_modules/vuejs-tree/src/components/TreeRow.vue b/node_modules/vuejs-tree/src/components/TreeRow.vue
index cda4577..7c51b23 100644
--- a/node_modules/vuejs-tree/src/components/TreeRow.vue
+++ b/node_modules/vuejs-tree/src/components/TreeRow.vue
@@ -1,27 +1,48 @@
 <template>
-  <li
-    class="node"
-    :data-id="node.id"
-    :style="styles.row.style">
+  <li class="node" :data-id="node.id" :style="styles.row.style">
     <div
-      :class="['row_data', selected ? styles.row.child.active.class: styles.row.child.class]"
+      :class="[
+        'row_data',
+        selected ? styles.row.child.active.class : styles.row.child.class,
+      ]"
       :style="selected ? styles.row.child.active.style : styles.row.child.style"
-      @click="toggleEvent('selected', node)">
-      <span @click.stop="options.events.expanded.state == true && node.nodes != undefined && node.nodes.length > 0 && toggleEvent('expanded', node)">
+      @click="toggleEvent('selected', node)"
+    >
+      <span
+        @click.stop="
+          options.events.expanded.state == true &&
+            node.nodes != undefined &&
+            node.nodes.length > 0 &&
+            toggleEvent('expanded', node)
+        "
+      >
         <i
-          v-if="options.events.expanded.state == true && node.nodes != undefined && node.nodes.length > 0"
-          :class="[{'expanded': expanded == true}, styles.expanded.class]">
+          v-if="
+            options.events.expanded.state == true &&
+            node.nodes != undefined &&
+            node.nodes.length > 0
+          "
+          :class="[{ expanded: expanded == true }, styles.expanded.class]"
+        >
         </i>
         <span
-          v-else-if="options.events.expanded.state == true && node.nodes == undefined"
-          class="small-tree-indent">
+          v-else-if="
+            options.events.expanded.state == true && node.nodes == undefined
+          "
+          class="small-tree-indent"
+        >
         </span>
       </span>
       <i
         v-if="options.events.selected.state == true"
         @click.stop="toggleEvent('selected', node)"
-        :class="expanded ? styles.selectIcon.active.class : styles.selectIcon.class"
-        :style="selected ? styles.selectIcon.active.style : styles.selectIcon.style">
+        :class="
+          expanded ? styles.selectIcon.active.class : styles.selectIcon.class
+        "
+        :style="
+          selected ? styles.selectIcon.active.style : styles.selectIcon.style
+        "
+      >
       </i>
       <input
         type="checkbox"
@@ -30,47 +51,68 @@
         :checked="node.state.checked"
         v-if="options.events.checked.state == true"
         @click.stop="toggleEvent('checked', node)"
-      >
+      />
       <span
         data-toggle="tooltip"
         data-placement="top"
         :title="node.definition"
-        v-bind:class="[{'selected': selected}, styles.text.class]"
+        v-bind:class="[{ selected: selected }, styles.text.class]"
         :style="selected ? styles.text.active.style : styles.text.style"
-        @click.stop="options.events.editableName.state && toggleEvent('editableName', node)" >
-        {{ node.text }}
+        @click.stop="
+          options.events.editableName.state && toggleEvent('editableName', node)
+        "
+      >
+        {{ node.definition }}
       </span>
       <span
         v-if="options.addNode.state == true"
         @click.stop="options.addNode.fn(node)"
-        class="icon_parent">
+        class="icon_parent"
+      >
         <i
-          v-bind:class="[{'icon-hover': options.addNode.appearOnHover}, styles.addNode.class]"
-          :style="styles.addNode.style">
+          v-bind:class="[
+            { 'icon-hover': options.addNode.appearOnHover },
+            styles.addNode.class,
+          ]"
+          :style="styles.addNode.style"
+        >
         </i>
       </span>
       <span
         v-if="options.editNode.state == true"
         @click.stop="options.editNode.fn(node)"
-        class="icon_parent">
+        class="icon_parent"
+      >
         <i
-        v-bind:class="[{'icon-hover': options.editNode.appearOnHover}, styles.editNode.class]"
-        :style="styles.editNode.style">
+          v-bind:class="[
+            { 'icon-hover': options.editNode.appearOnHover },
+            styles.editNode.class,
+          ]"
+          :style="styles.editNode.style"
+        >
         </i>
       </span>
       <span
         v-if="options.deleteNode.state == true"
         @click.stop="options.deleteNode.fn(node)"
-        class="icon_parent">
+        class="icon_parent"
+      >
         <i
-        v-bind:class="[{'icon-hover': options.deleteNode.appearOnHover}, styles.deleteNode.class]"
-        :style="styles.deleteNode.style">
+          v-bind:class="[
+            { 'icon-hover': options.deleteNode.appearOnHover },
+            styles.deleteNode.class,
+          ]"
+          :style="styles.deleteNode.style"
+        >
         </i>
       </span>
       <span v-if="options.showTags == true && node.tags">
         <span
-          v-if="node.tags[0] != undefined && node.tags[0]!= null && node.tags[0]"
-          class="badge">
+          v-if="
+            node.tags[0] != undefined && node.tags[0] != null && node.tags[0]
+          "
+          class="badge"
+        >
           {{ node.tags[0] }}
         </span>
       </span>
@@ -87,17 +129,22 @@
         :parent-node="node"
         v-on:emitNodeChecked="emitNodeChecked"
         v-on:emitNodeExpanded="emitNodeExpanded"
-        v-on:emitNodeSelected="emitNodeSelected">
+        v-on:emitNodeSelected="emitNodeSelected"
+      >
       </tree-row>
     </ul>
   </li>
 </template>
 
 <script lang="ts">
-import { reactive } from 'vue'
-import { Options, Vue } from 'vue-class-component'
-import { NodeData, TreeRowCustomStyles, TreeRowCustomOptions } from './interface'
-import { copyOptions, recCallNodes } from '@/components/helper'
+import { reactive } from "vue";
+import { Options, Vue } from "vue-class-component";
+import {
+  NodeData,
+  TreeRowCustomStyles,
+  TreeRowCustomOptions,
+} from "./interface";
+import { copyOptions, recCallNodes } from "@/components/helper";
 
 @Options({
   props: {
@@ -105,184 +152,188 @@ import { copyOptions, recCallNodes } from '@/components/helper'
     customStyles: Object,
     node: Object,
     parentNode: Object,
-    depth: Number
-  }
+    depth: Number,
+  },
 })
-
 export default class Tree extends Vue {
-  customOptions!: TreeRowCustomOptions
-  customStyles!: TreeRowCustomStyles
-  node!: NodeData
-  parentNode!: NodeData
-  depth!: number
+  customOptions!: TreeRowCustomOptions;
+  customStyles!: TreeRowCustomStyles;
+  node!: NodeData;
+  parentNode!: NodeData;
+  depth!: number;
 
   styles: TreeRowCustomStyles = reactive({
     row: {
       style: {
-        width: '500px',
-        cursor: 'pointer'
+        width: "500px",
+        cursor: "pointer",
       },
       child: {
-        class: '',
+        class: "",
         style: {
-          height: '35px'
+          height: "35px",
         },
         active: {
-          class: '',
+          class: "",
           style: {
-            height: '35px'
-          }
-        }
-      }
+            height: "35px",
+          },
+        },
+      },
     },
     rowIndent: {
-      paddingLeft: '20px'
+      paddingLeft: "20px",
     },
     expanded: {
-      class: 'expanded_icon'
+      class: "expanded_icon",
     },
     addNode: {
-      class: 'add_icon',
+      class: "add_icon",
       style: {
-        color: '#007AD5'
-      }
+        color: "#007AD5",
+      },
     },
     editNode: {
-      class: 'edit_icon',
+      class: "edit_icon",
       style: {
-        color: '#007AD5'
-      }
+        color: "#007AD5",
+      },
     },
     deleteNode: {
-      class: 'delete_icon',
+      class: "delete_icon",
       style: {
-        color: '#EE5F5B'
-      }
+        color: "#EE5F5B",
+      },
     },
     selectIcon: {
-      class: 'folder_icon',
+      class: "folder_icon",
       style: {
-        color: '#007AD5'
+        color: "#007AD5",
       },
       active: {
-        class: 'folder_icon_active',
+        class: "folder_icon_active",
         style: {
-          color: '#2ECC71'
-        }
-      }
+          color: "#2ECC71",
+        },
+      },
     },
     text: {
       style: {},
-      class: 'capitalize',
+      class: "capitalize",
       active: {
         style: {
-          'font-weight': 'bold',
-          color: '#2ECC71'
-        }
-      }
-    }
-  })
+          "font-weight": "bold",
+          color: "#2ECC71",
+        },
+      },
+    },
+  });
 
   options: TreeRowCustomOptions = reactive({
     events: {
       expanded: {
         state: true,
-        fn: null
+        fn: null,
       },
       selected: {
         state: false,
-        fn: null
+        fn: null,
       },
       checked: {
         state: false,
-        fn: null
+        fn: null,
       },
       editableName: {
         state: false,
         fn: null,
-        calledEvent: null
-      }
+        calledEvent: null,
+      },
     },
     addNode: { state: false, fn: null, appearOnHover: false },
     editNode: { state: false, fn: null, appearOnHover: false },
     deleteNode: { state: false, fn: null, appearOnHover: false },
-    showTags: false
-  })
+    showTags: false,
+  });
 
-  get selected (): boolean {
-    return this.node.state.selected
+  get selected(): boolean {
+    return this.node.state.selected;
   }
 
-  get expanded (): boolean {
-    return this.node.state.expanded
+  get expanded(): boolean {
+    return this.node.state.expanded;
   }
 
-  mounted () {
-    copyOptions(this.customOptions, this.options)
-    copyOptions(this.customStyles, this.styles)
-    if (this.node.checkable !== undefined) this.options.events.checked.state = this.node.checkable
-    if (this.node.selectable !== undefined) this.options.events.selected.state = this.node.selectable
-    if (this.node.expandable !== undefined) this.options.events.expanded.state = this.node.expandable
+  mounted() {
+    copyOptions(this.customOptions, this.options);
+    copyOptions(this.customStyles, this.styles);
+    if (this.node.checkable !== undefined)
+      this.options.events.checked.state = this.node.checkable;
+    if (this.node.selectable !== undefined)
+      this.options.events.selected.state = this.node.selectable;
+    if (this.node.expandable !== undefined)
+      this.options.events.expanded.state = this.node.expandable;
   }
 
   // Handle TreeRow events
-  toggleEvent (eventType: string, node: NodeData) {
-    const event = (this.options.events as any)[eventType]
-    if (eventType === 'editableName' && event.calledEvent) {
-      this.toggleEvent(event.calledEvent, node)
+  toggleEvent(eventType: string, node: NodeData) {
+    const event = (this.options.events as any)[eventType];
+    if (eventType === "editableName" && event.calledEvent) {
+      this.toggleEvent(event.calledEvent, node);
     } else if (event.state === true) {
-      const fnName = event.fn || this.defaultEventFn(eventType)
-      if (fnName) { fnName(node, this) }
+      const fnName = event.fn || this.defaultEventFn(eventType);
+      if (fnName) {
+        fnName(node, this);
+      }
     }
   }
 
   // Default functions for TreeRow event, can be overwritten in CustomOptions
-  defaultEventFn (eventType: string): any {
-    if (eventType === 'expanded') {
-      return this.toggleExpanded
-    } else if (eventType === 'selected') {
-      return this.toggleSelected
-    } else if (eventType === 'checked') {
-      return this.toggleChecked
+  defaultEventFn(eventType: string): any {
+    if (eventType === "expanded") {
+      return this.toggleExpanded;
+    } else if (eventType === "selected") {
+      return this.toggleSelected;
+    } else if (eventType === "checked") {
+      return this.toggleChecked;
     }
 
-    return null
+    return null;
   }
 
   // Default tree behavior when node is expanded
-  toggleExpanded (node: NodeData) {
-    this.node.state.expanded = !this.node.state.expanded
-    this.emitNodeExpanded(node, this.node.state.expanded)
+  toggleExpanded(node: NodeData) {
+    this.node.state.expanded = !this.node.state.expanded;
+    this.emitNodeExpanded(node, this.node.state.expanded);
   }
 
   // Default tree behavior when node is selected
-  toggleSelected (node: NodeData) {
-    this.node.state.selected = !this.node.state.selected
-    this.emitNodeSelected(node)
+  toggleSelected(node: NodeData) {
+    this.node.state.selected = !this.node.state.selected;
+    this.emitNodeSelected(node);
   }
 
   // Default tree behavior when node is checked
-  toggleChecked (node: NodeData) {
-    const state = !this.node.state.checked
-    this.node.state.checked = state
-    recCallNodes(state, 'checked', this.node.nodes)
-    this.$emit('emitNodeChecked', node)
-    this.emitNodeChecked(node)
+  toggleChecked(node: NodeData) {
+    const state = !this.node.state.checked;
+    this.node.state.checked = state;
+    recCallNodes(state, "checked", this.node.nodes);
+    this.$emit("emitNodeChecked", node);
+    this.emitNodeChecked(node);
   }
 
   // Redirect the event toward the Tree component
-  emitNodeSelected (nodeSelected: NodeData) {
-    this.$emit('emitNodeSelected', nodeSelected)
+  emitNodeSelected(nodeSelected: NodeData) {
+    this.$emit("emitNodeSelected", nodeSelected);
   }
 
   // Redirect the event toward the Tree component
-  emitNodeExpanded (node: NodeData, state: boolean) {
-    this.$emit('emitNodeExpanded', node, state)
+  emitNodeExpanded(node: NodeData, state: boolean) {
+    this.$emit("emitNodeExpanded", node, state);
   }
 
   // Redirect the event toward the Tree component
-  emitNodeChecked (nodeChecked: NodeData) {
-    this.$emit('emitNodeChecked', nodeChecked)
+  emitNodeChecked(nodeChecked: NodeData) {
+    this.$emit("emitNodeChecked", nodeChecked);
   }
 }
 </script>
@@ -295,9 +346,9 @@ export default class Tree extends Vue {
 .icon-hover {
   visibility: hidden;
   opacity: 0;
-  transition: all .2s ease-in-out;
+  transition: all 0.2s ease-in-out;
 }
-.row_data:hover .icon-hover{
+.row_data:hover .icon-hover {
   visibility: visible;
   opacity: 1;
 }
@@ -329,7 +380,7 @@ li {
 }
 .expanded_icon {
   transform: rotate(0deg);
-  transition: all ease .2s;
+  transition: all ease 0.2s;
   display: inline-block;
   width: 0;
   height: 0;
@@ -341,18 +392,18 @@ li {
   }
 }
 .add_icon:before {
-  content: '\002b';
+  content: "\002b";
 }
 .edit_icon:before {
-  content: '\00270e';
+  content: "\00270e";
 }
 .delete_icon:before {
-  content: '\00d7';
+  content: "\00d7";
 }
 .folder_icon:before {
-  content: '\1F5C0';
+  content: "\1F5C0";
 }
 .folder_icon_active:before {
-  content: '\1F5C1';
+  content: "\1F5C1";
 }
 </style>
